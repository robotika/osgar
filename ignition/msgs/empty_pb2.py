# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ignition/msgs/empty.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='ignition/msgs/empty.proto',
  package='ignition.msgs',
  syntax='proto3',
  serialized_pb=_b('\n\x19ignition/msgs/empty.proto\x12\rignition.msgs\"\x17\n\x05\x45mpty\x12\x0e\n\x06unused\x18\x01 \x01(\x08\x42 \n\x11\x63om.ignition.msgsB\x0b\x45mptyProtosb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_EMPTY = _descriptor.Descriptor(
  name='Empty',
  full_name='ignition.msgs.Empty',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='unused', full_name='ignition.msgs.Empty.unused', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=44,
  serialized_end=67,
)

DESCRIPTOR.message_types_by_name['Empty'] = _EMPTY

Empty = _reflection.GeneratedProtocolMessageType('Empty', (_message.Message,), dict(
  DESCRIPTOR = _EMPTY,
  __module__ = 'ignition.msgs.empty_pb2'
  # @@protoc_insertion_point(class_scope:ignition.msgs.Empty)
  ))
_sym_db.RegisterMessage(Empty)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\021com.ignition.msgsB\013EmptyProtos'))
# @@protoc_insertion_point(module_scope)
