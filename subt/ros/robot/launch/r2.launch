<?xml version="1.0"?>
<launch>
  <node name="$(arg robot_name)_proxy" pkg="proxy" type="ros_proxy" args="$(arg robot_name)" output="screen"/>

  <!-- Combining front RGBD depth and image data into a single message. -->
  <node pkg="nodelet" type="nodelet" name="rgbd_sync_front" args="standalone rtabmap_ros/rgbd_sync">
    <!-- Inputs -->
    <remap from="rgb/image" to="/$(arg robot_name)/rs_front/optical/color/image"/>
    <remap from="rgb/camera_info" to="$(arg robot_name)/rs_front/optical/color/camera_info"/>
    <remap from="depth/image" to="/$(arg robot_name)/rs_front/optical/depth/image"/>
    <!-- Output -->
    <remap from="rgbd_image/compressed" to="/rtabmap/rgbd/front/compressed"/>
    <remap from="rgbd_image" to="/rtabmap/rgbd/front"/>
  </node>

  <node pkg="nodelet" type="nodelet" name="rgbd_sync_rear" args="standalone rtabmap_ros/rgbd_sync">
    <!-- Inputs -->
    <remap from="rgb/image" to="/$(arg robot_name)/rs_back/optical/color/image"/>
    <remap from="rgb/camera_info" to="$(arg robot_name)/rs_back/optical/color/camera_info"/>
    <remap from="depth/image" to="/$(arg robot_name)/rs_back/optical/depth/image"/>
    <!-- Output -->
    <remap from="rgbd_image/compressed" to="/rtabmap/rgbd/rear/compressed"/>
    <remap from="rgbd_image" to="/rtabmap/rgbd/rear"/>
  </node>

  <!-- Location in the staging area. -->
  <node name="pose_from_artifact_origin" pkg="proxy" type="pose_from_artifact_origin" args="$(arg robot_name) odom">
    <remap from="pose_from_origin" to="$(arg robot_name)/pose_from_origin"/>
  </node>

  <!-- RGBD odometry -->
  <node ns="rtabmap/rgbd" pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry">
    <param name="database_path" type="string" value=""/>
    <param name="frame_id" type="string" value="$(arg robot_name)"/>
    <param name="odom_frame_id" type="string" value="odom"/>
    <param name="guess_frame_id" type="string" value="odom"/>
    <param name="publish_tf" type="bool" value="false"/>
    <param name="publish_null_when_lost" type="bool" value="false"/>
    <param name="subscribe_rgbd" type="bool" value="true"/>
    <param name="subscribe_depth" type="bool" value="false"/>
    <!-- Finding correspondences with the guess cannot be done with multiple cameras -->
    <param name="Vis/CorGuessWinSize" value="0"/>
    <!-- Default estimation type does not work with multiple cameras. -->
    <param name="Vis/EstimationType" value="0"/>
    <!-- Number of feature points to detect. Defaults to 1000 -->
    <param name="Vis/MaxFeatures" value="2000"/>
    <!-- Bundle adjustment does not work with multiple cameras. -->
    <param name="OdomF2M/BundleAdjustment" value="0"/>
    <!-- This robot cannot move left or up, at least unless something strange is happening. -->
    <param name="Odom/Holonomic" value="false"/>
    <!-- Internal Kalman filtering smoothes the estimate, which in turn prevents "our" Kalman from being confused by big input odometry jumps. -->
    <param name="Odom/FilteringStrategy" value="1"/>
    <param name="Odom/ResetCountdown" type="string" value="4"/>
    <param name="OdomF2M/MaxSize" value="8000"/>
    <param name="OdomF2M/ValidDepthRatio" value="1.0"/>
    <!-- GFTT/ORB is the default, but if somebody wants to experiment ...
         For some of the worlds, simpler features, such as FAST, may turn out better. -->
    <param name="Vis/FeatureType" value="4"/> <!-- [0=SURF 1=SIFT 2=ORB 3=FAST/FREAK 4=FAST/BRIEF 5=GFTT/FREAK 6=GFTT/BRIEF 7=BRISK 8=GFTT/ORB 9=KAZE 10=ORB-OCTREE 11=SuperPoint Torch.] -->
    <param name="FAST/GridCols" value="4"/>
    <param name="FAST/GridRows" value="4"/>
    <!-- Inputs -->
    <remap from="rgbd_image" to="front/compressed"/>
    <!-- Undocumented supported input, helps maintaining the right direction. -->
    <remap from="imu" to="/$(arg robot_name)/imu/data"/>
  </node>

  <!-- ICP Odometry based on lidar -->
  <node ns="rtabmap/icp" pkg="rtabmap_ros" type="icp_odometry" name="icp_odometry">
    <param name="database_path" type="string" value=""/>
    <param name="subscribe_scan" type="bool" value="true"/>
    <param name="frame_id" type="string" value="$(arg robot_name)"/>
    <param name="odom_frame_id" type="string" value="odom"/>
    <param name="guess_frame_id" type="string" value="odom"/>
    <param name="publish_tf" type="bool" value="false"/>
    <param name="publish_null_when_lost" type="bool" value="false"/>

    <param name="Reg/Strategy" type="string" value="1"/>
    <param name="OdomF2M/BundleAdjustment" type="string" value="0"/>
    <param name="Odom/ResetCountdown" type="string" value="2"/>
    <param name="Icp/MaxTranslation" type="string" value="3.0"/>
    <param name="Icp/MaxCorrespondenceDistance" type="string" value="0.5"/>
    <param name="Icp/PointToPlaneRadius" value="0.0"/>
    <!-- This robot cannot move left or up, at least unless something strange is happening. -->
    <param name="Odom/Holonomic" value="false"/>
    <!-- Internal Kalman filtering smoothes the estimate, which in turn prevents "our" Kalman from being confused by big input odometry jumps. -->
    <param name="Odom/FilteringStrategy" value="1"/>
    <!-- Inputs -->
    <remap from="scan_cloud" to="/$(arg robot_name)/points"/>
  </node>

  <!-- Adding a missing transform to make wheel odometry meaningful. -->
  <!--
  <node pkg="tf" type="static_transform_publisher" name="wheel_odom_transform" args="0 0 0 0 0 0 /odom /$(arg robot_name)/odom 100" />
  -->

  <!-- Fusion of wheel odometr, "GPS" and IMU data.
       https://github.com/introlab/rtabmap_ros/blob/master/launch/tests/sensor_fusion.launch
       https://answers.ros.org/question/248109/integrating-an-imu-with-rtabmap/
       http://docs.ros.org/melodic/api/robot_localization/html/state_estimation_nodes.html
  -->
  <node pkg="robot_localization" type="ukf_localization_node" name="fused_odometry">
    <param name="frequency" value="50"/>
    <param name="sensor_timeout" value="0.1"/>
    <param name="two_d_mode" value="false"/>

    <param name="odom_frame" value="odom"/>
    <param name="base_link_frame" value="$(arg robot_name)"/>
    <param name="world_frame" value="odom"/>

    <param name="transform_time_offset" value="0.0"/>

    <!-- Wheel odometry -->
    <param name="odom0" value="$(arg robot_name)/odom"/>
    <!-- RGBD odometry from  depth cameras -->
    <param name="odom1" value="/rtabmap/rgbd/odom"/>
    <!-- ICP odometry from lidar -->
    <param name="odom2" value="/rtabmap/icp/odom"/>
    <!-- Information about location in the staging area. -->
    <param name="pose0" value="$(arg robot_name)/pose_from_origin"/>
    <!-- IMU -->
    <param name="imu0" value="$(arg robot_name)/imu/data"/>

    <param name="odom0_differential" value="false"/>
    <param name="odom1_differential" value="false"/>
    <param name="odom2_differential" value="false"/>
    <param name="pose0_differential" value="false"/>
    <param name="imu0_differential" value="false"/>

    <param name="odom0_relative" value="false"/>
    <param name="odom1_relative" value="false"/>
    <param name="odom2_relative" value="false"/>
    <param name="pose0_relative" value="true"/>
    <param name="imu0_relative" value="false"/>

    <param name="imu0_remove_gravitational_acceleration" value="true"/>

    <!-- The order of the values is x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. -->
    <!-- We only take forward velocity from the wheel-based odometry, because nothing else, including rotation velocity, can be trusted. -->
    <rosparam param="odom0_config">[false, false, false,
                                    false, false, false,
                                    true, false, false,
                                    false, false, false,
                                    false, false, false]</rosparam>
    <!-- We take vx, vy and vz instead of x, y and z, because visual odometry can drift arbitrarily far because of not supporting all available sensors. -->
    <rosparam param="odom1_config">[false, false, false,
                                    false, false, false,
                                    true, true, true,
                                    false, false, false,
                                    false, false, false]</rosparam>
    <!-- Taking vx and vy, because x and y can drift arbitrarily. Z axis is meaningless, because we are estimating from planar lidars. -->
    <rosparam param="odom2_config">[false, false, false,
                                    false, false, false,
                                    true, true, false,
                                    false, false, false,
                                    false, false, false]</rosparam>
    <rosparam param="pose0_config">[true, true, true,
                                    true, true, true,
                                    false, false, false,
                                    false, false, false,
                                    false, false, false]</rosparam>
    <rosparam param="imu0_config">[false, false, false,
                                   true,  true,  true,
                                   false, false, false,
                                   true,  true,  true,
                                   true,  true,  true]</rosparam>

    <!-- When the robot starts slipping or spinning wheels in the air, we need to start ignoring wheel-based odometry.
         The unit of the threshold is a Mahalanobis distance (i.e. sum) of numbers of sigmas in each dimension -->
    <rosparam param="odom0_twist_rejection_threshold">4</rosparam>
    <rosparam param="odom2_twist_rejection_threshold">2</rosparam>

    <!-- Trying to not have data stuck in a TCP buffer. -->
    <rosparam param="odom0_nodelay">true</rosparam>
    <rosparam param="odom1_nodelay">true</rosparam>
    <rosparam param="odom2_nodelay">true</rosparam>
    <rosparam param="pose0_nodelay">true</rosparam>
    <rosparam param="imu0_nodelay">true</rosparam>

    <!-- Setting some physical constraints. -->
    <!--
    <rosparam param="acceleration_limits">[10.6, 0.0, 0.0,
                                           0.0, 0.0, 1.6]</rosparam>
    <rosparam param="deceleration_limits">[10.6, 0.0, 0.0,
                                           0.0, 0.0, 1.6]</rosparam>
    -->

    <!-- When some data arrive late, we are willing to go back in time and correct the estimate. -->
    <param name="smooth_lagged_data" value="true"/>
    <param name="history_length" value="1.0"/>

    <!---->
    <param name="print_diagnostics" value="true"/>
    <remap from="/diagnostics" to="$(arg robot_name)/odom_diagnostics"/>
    <!---->

    <!-- Output -->
    <remap from="odometry/filtered" to="/$(arg robot_name)/odom_fused"/>
  </node>

</launch>
